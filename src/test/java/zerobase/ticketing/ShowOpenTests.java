package zerobase.ticketing;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;
import zerobase.ticketing.domain.ShowOpen;
import zerobase.ticketing.repository.ShowOpenRepository;
import zerobase.ticketing.service.ShowOpenService;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest
public class ShowOpenTests {

    private final ShowOpenService showOpenService;
    private final ShowOpenRepository showOpenRepository;

    @Autowired
    public ShowOpenTests(ShowOpenService showOpenService, ShowOpenRepository showOpenRepository) {
        this.showOpenService = showOpenService;
        this.showOpenRepository = showOpenRepository;
    }

    @Test
    @Transactional
    void registerShowOpen() {
        // given
        ShowOpen newShowOpen = ShowOpen.builder()
                .showInfoId(1)
                .showDate(LocalDate.parse("2024-07-01"))
                .showTime(LocalTime.parse("19:00"))
                .openBooking(LocalDate.parse("2024-06-01"))
                .openBookingTime(LocalTime.parse("20:00"))
                .closeBooking(LocalDate.parse("2024-06-30"))
                .closeBookingTime(LocalTime.parse("18:00"))
                .cast("수료생").build();
        List<ShowOpen> showOpenList = Arrays.asList(
                newShowOpen
        );

        // when
        int insertedCnt = showOpenService.registerShowOpen(showOpenList);

        // then
        assertEquals(1, insertedCnt);
    }

    @Test
    @Transactional
    void readShowOpen() {
        // given
        ShowOpen newShowOpen = ShowOpen.builder()
                .showInfoId(1)
                .showDate(LocalDate.parse("2024-07-01"))
                .showTime(LocalTime.parse("19:00"))
                .openBooking(LocalDate.parse("2024-06-01"))
                .openBookingTime(LocalTime.parse("20:00"))
                .closeBooking(LocalDate.parse("2024-06-30"))
                .closeBookingTime(LocalTime.parse("18:00"))
                .cast("수료생").build();
        List<ShowOpen> showOpenList = Arrays.asList(
                newShowOpen
        );
        showOpenService.registerShowOpen(showOpenList);
        int showId = showOpenRepository.findShowId(newShowOpen.getShowInfoId(), newShowOpen.getShowDate(), newShowOpen.getShowTime());

        // when
        ShowOpen showOpen = showOpenRepository.findShowByShowId(showId);

        // then
        assertEquals(showId, showOpen.getShowId());
        assertEquals(newShowOpen.getShowDate(), showOpen.getShowDate());
        assertEquals(newShowOpen.getShowTime(), showOpen.getShowTime());

    }

    @Test
    @Transactional
    void updateShowOpen() {
        // given
        ShowOpen showOpen = ShowOpen.builder()
                .showInfoId(1)
                .showDate(LocalDate.parse("2024-07-01"))
                .showTime(LocalTime.parse("19:00"))
                .openBooking(LocalDate.parse("2024-06-01"))
                .openBookingTime(LocalTime.parse("20:00"))
                .closeBooking(LocalDate.parse("2024-06-30"))
                .closeBookingTime(LocalTime.parse("18:00"))
                .cast("수료생").build();
        List<ShowOpen> showOpenList = Arrays.asList(
                showOpen
        );
        showOpenService.registerShowOpen(showOpenList);
        int showId = showOpenRepository.findShowId(showOpen.getShowInfoId(), showOpen.getShowDate(), showOpen.getShowTime());

        showOpen.setShowDate(LocalDate.parse("2024-08-01"));

        // when
        showOpen.setShowId(showId);
        showOpenRepository.updateShowOpen(showOpen);
        ShowOpen resultShowOpen = showOpenService.readShowOpen(showId);

        // then
        assertEquals(resultShowOpen.getShowDate(), showOpen.getShowDate());
    }

    @Test
    @Transactional
    void deleteShowOpen() {
        // given
        ShowOpen showOpen = ShowOpen.builder()
                .showInfoId(1)
                .showDate(LocalDate.parse("2024-07-01"))
                .showTime(LocalTime.parse("19:00"))
                .openBooking(LocalDate.parse("2024-06-01"))
                .openBookingTime(LocalTime.parse("20:00"))
                .closeBooking(LocalDate.parse("2024-06-30"))
                .closeBookingTime(LocalTime.parse("18:00"))
                .cast("수료생").build();
        List<ShowOpen> showOpenList = Arrays.asList(
                showOpen
        );
        showOpenService.registerShowOpen(showOpenList);
        int showId = showOpenRepository.findShowId(showOpen.getShowInfoId(), showOpen.getShowDate(), showOpen.getShowTime());

        // when
        showOpen.setShowId(showId);
        showOpenRepository.deleteShowOpen(showOpen);

        // then
        int showOpenCount = showOpenRepository.existsShowOpen(showOpen.getShowInfoId(), showOpen.getShowDate(), showOpen.getShowTime());
        assertEquals(0, showOpenCount);
    }
}
